apiVersion: v1
kind: ConfigMap # create a configuration map
metadata:
  name: order-service-config
data:
  application.properties: |
    spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    spring.datasource.url=jdbc:mysql://mysql-service:3306/order-service
    spring.datasource.username=${MYSQL_USERNAME}
    spring.datasource.password=${MYSQL_PASSWORD}
    
    spring.jpa.hibernate.ddl-auto=update
    server.port=8081
    spring.application.name=order-service
    
    management.endpoints.web.exposure.include=*
    management.endpoint.health.show-details=always
    management.health.circuitbreakers.enabled=true
    management.health.ratelimiters.enabled=true
    
    resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
    resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
    resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
    resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
    resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
    resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
    resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
    resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true
    
    resilience4j.timelimiter.instances.inventory.timeout-duration=3s
    
    resilience4j.retry.instances.inventory.max-attempts=3
    resilience4j.retry.instances.inventory.wait-duration=5s

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
spec:
  replicas: 1 # desired number of pods of replicas to run for this deployment
  selector:
    matchLabels: # labels to be applied to the pods that this deployment will manage
      app: order-service
  template:
    metadata:
      labels: # labels to be applied to the pods created by this deployment. Labels should match the selector labels
        app: order-service
    spec:
      containers: # A list of containers to be run in each pod of the deployment.
        - name: order-service
          image: joelneyo/order-service:latest # The Docker image to be used for this container
          resources:
            requests:
              cpu: 500m
            limits:
              cpu: 1000m
          ports: # A list of ports to be exposed by the container.
            - containerPort: 8081
          env: # A list of environment variables to be set in the container
            - name: SPRING_PROFILES_ACTIVE # Sets the active Spring profile to "production".
              value: k8s
            - name: MYSQL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mysql-root-credentials
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-root-credentials
                  key: password
          volumeMounts:
            - name: config-volume
              mountPath: /config
              readOnly: true
          args: [ "--spring.config.location=file:/config/application.properties" ]
      volumes:
        - name: config-volume
          configMap:
            name: order-service-config
---

apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  selector:
    app: order-service
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
  type: ClusterIP


